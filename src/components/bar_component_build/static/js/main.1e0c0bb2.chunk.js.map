{"version":3,"sources":["ViewershipComponent.tsx","index.tsx"],"names":["NUM_EPISODES","D3_DIV_ID","_","require","ViewershipComponent","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","componentDidMount","get_data","metadata","get_metadata","_this$get_dimensions","get_dimensions","_this$get_dimensions2","_slicedToArray","width","height","margin","colour","get_theme","setState","zoom","svg","d3","append","attr","left","right","top","bottom","container","node","parentNode","parseInt","style","aspect","resize","targetWidth","Math","round","Streamlit","setFrameHeight","window","on","render","data","_this$get_dimensions3","_this$get_dimensions4","stTheme","episodes","map","d","episode","toString","filter","value","index","self","indexOf","props","marks","i","_jsxs","children","_jsx","id","ConfigProvider","theme","token","colorPrimary","secondaryBackgroundColor","colorFillContentHover","colorPrimaryBorder","colorPrimaryBorderHover","Slider","range","min","max","step","defaultValue","onAfterChange","changeEpisodeBounds","tooltip","open","disabled","duration","undefined","start_episode","end_episode","displayed_episodes","select","xAxis","episode_x_axis","selectAll","each","push","e","console","log","scaleExtent","event","x","domain","newX","transform","rescaleX","ticks","tickFormat","tickSize","start_time","end_time","path","moveTo","lineTo","myZoom","cloneDeep","k","transition","_createClass","key","table","this","num_columns","columns","_loop","rowIndex","row","columnIndex","_table$getCell","getCell","content","classNames","type","act","chapter","segment","parseFloat","viewership","rows","_this$get_dimensions5","_this$get_dimensions6","text","granularity","metric","y","state","yAxis","distinct","join","gridLineXs","target","pageY","pageX","acts","chapters","gridShape","gridSize","symbolSize","format_structure","Object","fromEntries","Set","add","legendGrid","j","square","size","has","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"6JAcIA,EACAC,E,6GAJEC,EAAIC,EAAQ,KAyBZC,EAAmB,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAwbtB,OAxbsBP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KA6ChBM,kBAAoB,WACZX,EAAKY,WAAZ,IACAC,EAAWb,EAAKc,eAAcC,EACJf,EAAKgB,iBAAgBC,EAAAC,YAAAH,EAAC,GAA/CI,EAAKF,EAAA,GAAEG,EAAMH,EAAA,GAAEI,EAAMJ,EAAA,GACbJ,EAASS,OACRtB,EAAKuB,YAErBvB,EAAKwB,SAAS,CAAEC,KAAM,CAAC,EAAGlC,KA4B1B,IAAMmC,EAAMC,IAAU,IAAMnC,GACboC,OAAO,OACLC,KAAK,QAASV,EAAQE,EAAOS,KAAOT,EAAOU,OAC3CF,KAAK,SAAUT,EAASC,EAAOW,IAAMX,EAAOY,QAC5CzB,MA9BjB,SAAqBkB,GAEnB,IAAIQ,EAAYP,IAAUD,EAAIS,OAAOC,YACjCjB,EAAQkB,SAASX,EAAIY,MAAM,UAC3BlB,EAASiB,SAASX,EAAIY,MAAM,WAC5BC,EAASpB,EAAQC,EAWrB,SAASoB,IACL,IAAIC,EAAcJ,SAASH,EAAUI,MAAM,UAC3CZ,EAAIG,KAAK,QAASY,GAClBf,EAAIG,KAAK,SAAUa,KAAKC,MAAMF,EAAcF,IAC5CK,IAAUC,gBACd,CAZAnB,EAAIG,KAAK,UAAW,OAASV,EAAQ,IAAMC,GACtCS,KAAK,sBAAuB,YAC5BrB,KAAKgC,GAEVb,IAAUmB,QAAQC,GAAG,UAAYb,EAAUL,KAAK,MAAOW,EASzD,IASeZ,OAAO,KACLC,KAAK,YAAY,aAADnB,OAAeW,EAAOS,KAAI,KAAApB,OAAIW,EAAOW,IAAG,MAG9DN,EAAIE,OAAO,QAAQA,OAAO,gBACtBC,KAAK,KAAM,QACXD,OAAO,YACPC,KAAK,QAASV,GACdU,KAAK,SAAUT,GACfS,KAAK,IAAK,GACVA,KAAK,IAAK,GAGzBH,EAAIE,OAAO,KACNC,KAAK,YAAY,eAADnB,OAAiBU,EAAM,MACvCS,KAAK,KAAM,WAChBH,EAAIE,OAAO,KACNC,KAAK,KAAM,WAEhBF,IAAU,QACPC,OAAO,OACPC,KAAK,QAAS,eACdS,MAAM,cAAc,sJACpBA,MAAM,gBAAiB,SACvBA,MAAM,YAAa,QACnBA,MAAM,YAAa,SACnBA,MAAM,gBAAiB,YACvBA,MAAM,cAAe,OACrBA,MAAM,UAAW,OACjBA,MAAM,aAAc,qBACpBA,MAAM,QAAS,QACfA,MAAM,UAAW,SACjBA,MAAM,UAAW,eACjBA,MAAM,WAAY,YAClBA,MAAM,aAAc,UAEvBZ,EAAIE,OAAO,QACRC,KAAK,KAAM,UACXA,KAAK,YAAa,aAAgBV,EAAQ,EAAK,KAA7B,QAClBmB,MAAM,YAAa,IACnBA,MAAM,cAAe,UAExBZ,EAAIE,OAAO,QACNC,KAAK,KAAM,YACXA,KAAK,YAAa,eAClBA,KAAK,KAAMR,EAAOS,MAClBD,KAAK,KAAOT,EAAS,GACrBS,KAAK,KAAM,OACXS,MAAM,YAAa,IACnBA,MAAM,cAAe,UAE1BZ,EAAIE,OAAO,KACNC,KAAK,QAAS,cACdA,KAAK,YAAY,aAADnB,OAAeS,EAAQ,GAAE,KAAAT,OAAIU,EAAS,GAAE,MAE7DwB,IAAUC,gBACZ,EAAC7C,EAgLMgD,OAAS,WACR,IAAAC,EAAOjD,EAAKY,WAAUsC,EACIlD,EAAKgB,iBAAgBmC,EAAAjC,YAAAgC,EAAC,GAAhC7B,GAAV8B,EAAA,GAAQA,EAAA,GAAQA,EAAA,IACtBC,EAAUpD,EAAKuB,YAMf8B,EAAWJ,EAAKK,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAAQC,UAAU,IAC5BC,QALN,SAACC,EAAOC,EAAOC,GAC9B,OAAOA,EAAKC,QAAQH,KAAWC,CACjC,IAKArE,EAAe8D,EAASjD,OACxBZ,EAAY,wBAA0BQ,EAAK+D,MAAM1D,KAAU,IAE3D,IAAI2D,EAAQ,CAAC,EAGb,OAFAX,EAASC,KAAI,SAACC,EAAGU,GAAC,OAAKD,EAAMC,EAAE,GAAE,GAAAvD,OAAM6C,EAAG,IAGxCW,eAAA,QAAAC,SAAA,CACEC,cAAA,OAAKC,GAAI7E,IAET4E,cAAA,OAAK9B,MAAO,CAACjB,OAAO,QAADX,OAAUW,EAAOU,MAAM,EAAC,YAAArB,OAAWW,EAAOS,KAAK,EAAC,OAAOuC,GAAI7E,EAAU,UAAU2E,SAClGC,cAACE,IAAc,CACbC,MAAO,CACLC,MAAO,CACLC,aAAqB,OAAPrB,QAAO,IAAPA,OAAO,EAAPA,EAASsB,yBACvBC,sBAA8B,OAAPvB,QAAO,IAAPA,OAAO,EAAPA,EAASsB,yBAChCE,mBAA2B,OAAPxB,QAAO,IAAPA,OAAO,EAAPA,EAASsB,yBAC7BG,wBAAgC,OAAPzB,QAAO,IAAPA,OAAO,EAAPA,EAASsB,2BAEpCP,SAEJC,cAACU,IAAM,CACLC,OAAO,EACPV,GAAG,aACHW,IAAK,EACLC,IAAK1F,EACLyE,MAAOA,EACPkB,KAAM,EACNC,aAAc,CAAC,EAAG5F,GAClB6F,cAAepF,EAAKqF,oBACpBC,QAAS,CAACC,MAAM,GAChBC,SAAUxF,EAAK+D,MAAMyB,iBAM7B,EAACxF,EAEOqF,oBAAsB,SAAC1B,GAAyB,IAAlB8B,EAAQtF,UAAAC,OAAA,QAAAsF,IAAAvF,UAAA,GAAAA,UAAA,GAAC,IAEvCgB,EAAQ,KADyC,GAAvB,IAE1BC,EAAS,IAFM,GAAwB,GAIvCuE,EAAgBhC,EAAM,GACtBiC,EAAcjC,EAAM,GACpBkC,EAAqBD,EAAYD,EAAgB,EACjDjE,EAAMC,IAAU,IAAMnC,GAAWsG,OAAO,OAAOA,OAAO,KACtDC,EAAQrE,EAAIoE,OAAO,YAErBzC,EAAkB,GAClB2C,EAAiB,CAAC,EAEtBtE,EAAIuE,UAAU,aACTC,MAAK,SAAS3C,GACbF,EAAS8C,KAAK5C,EAAEC,QAClB,IAMJH,EAAWA,EAASK,QAJH,SAACC,EAAOC,EAAOC,GAC9B,OAAOA,EAAKC,QAAQH,KAAWC,CACjC,IAIAP,EAASC,KAAI,SAAC8C,EAAGnC,GAAC,OAAK+B,EAAeI,GAAKnC,EAAI,CAAC,IAChDoC,QAAQC,IAAIjD,GACZgD,QAAQC,IAAIN,GAiCZ,IAAIvE,EAAOE,MACJ4E,YAAY,CAAC,EAAGhH,IAChBwD,GAAG,QAhCV,SAAmByD,GACjB,IAAIC,EAAI9E,MACG+E,OAAO,CAAC,GAAKnH,EAAa,KAC1BwF,MAAM,CAAC,EAAG5D,IACjBwF,EAAOH,EAAMI,UAAUC,SAASJ,GAGpCV,EAAMvF,KAAKmB,IAAcgF,GACVG,MAAMjB,GACNkB,YAAW,SAAC9C,GAAC,OAAKA,EAAE,GAAK,GAAKA,EAAE,EAAIZ,EAASjD,OAAM,WAAAM,OAAc2C,EAASY,EAAE,IAAO,EAAE,IACrF+C,SAAS,IAExBjB,EAAME,UAAU,cACTpE,KAAK,YAAY,GAADnB,OAAKgC,KAAKsC,IAAI,IAAIa,EAAoB,MAE7DnE,EAAIuE,UAAU,aACPpE,KAAK,KAAK,SAAA0B,GAAC,OAAIoD,EAAKpD,EAAE0D,WAAajB,EAAezC,EAAEC,SAAW,GAAI,IACnE3B,KAAK,SAAS,SAAA0B,GAAC,OAAIoD,EAAKpD,EAAE2D,SAAWlB,EAAezC,EAAEC,SAAW,IAAOmD,EAAKpD,EAAE0D,WAAajB,EAAezC,EAAEC,SAAW,GAAI,IAC5H3B,KAAK,eAAe,GAADnB,OAAKgC,KAAKsC,IAAI,GAAK,EAAGa,KAEhDnE,EAAIuE,UAAU,aACTpE,KAAK,KAAK,SAAA0B,GAAO,IAAI4D,EAAOxF,MAGX,OAFAwF,EAAKC,OAAOT,EAAKpD,GAAI,GACrB4D,EAAKE,OAAOV,EAAKpD,GAAInC,EAAO,IACrB+F,CACzB,GAEN,IAOIG,EAAS7H,EAAE8H,UAAU5F,KACzB2F,EAAOE,EAAIjI,EAAasG,EACxByB,EAAOb,EAAyBtF,EAAM0E,GAA1B,EAAEF,GAEdjE,EAAI+F,aAAahC,SAASA,GACrBjF,KAAKiB,EAAKmF,UAAWU,GAE1BtH,EAAKwB,SAAS,CAAEC,KAAM,CAACkE,EAAeC,IACxC,EAAC5F,CAAA,CA/HA,OA+HA0H,YAAA/H,EAAA,EAAAgI,IAAA,WAAAhE,MAvbD,WAME,IALA,IAAMiE,EAAoBC,KAAK9D,MAAM1D,KAAW,KAE5C4C,EAAmB,GACjB6E,EAAcF,EAAMG,QAC1BC,EAAA,SAAAC,GAEE,IAAMC,EAAMvG,IAAS,EAAGmG,GAAaxE,KAAI,SAAC6E,GACxC,IAAAC,EAA0CR,EAAMS,QAAQJ,EAAUE,GAA9CG,GAAFF,EAAVG,WAAmBH,EAAPE,SAAWF,EAAF/D,GAAQ+D,EAAJI,KACjC,OAAc,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAAS7E,UAClB,IAEAR,EAAKkD,KAAK,CAACvC,MAAMqE,EACfzE,QAAQnB,SAAS6F,EAAI,IACrBO,IAAIP,EAAI,GACRQ,QAAQR,EAAI,GACZS,QAAQT,EAAI,GACZjB,WAAW2B,WAAWV,EAAI,IAC1BhB,SAAS0B,WAAWV,EAAI,IACxBW,WAAWD,WAAWV,EAAI,KAC9B,EAdSD,EAAW,EAAGA,EAAWL,EAAMkB,KAAMb,IAAUD,EAAAC,GAgBxD,OAAOhF,CACT,GAAC,CAAA0E,IAAA,eAAAhE,MAED,WACE,OAAOkE,KAAK9D,MAAM1D,KAAKQ,QACzB,GAAC,CAAA8G,IAAA,YAAAhE,MAED,WACE,OAAOkE,KAAK9D,MAAMQ,KACpB,GAAC,CAAAoD,IAAA,iBAAAhE,MAED,WAEE,IAAMtC,EAAS,CAACW,IAAK,GAAID,MAAO,IAAKE,OAAQ,GAAIH,KAAM,IAIvD,MAAO,CAHO,KAAOT,EAAOS,KAAOT,EAAOU,MAC3B,IAAMV,EAAOW,IAAMX,EAAOY,OAElBZ,EACzB,GAAC,CAAAsG,IAAA,qBAAAhE,MAwGD,WACQ,IAAAV,EAAO4E,KAAKjH,WACZC,EAAWgH,KAAK/G,eAAciI,EACJlB,KAAK7G,iBAAgBgI,EAAA9H,YAAA6H,EAAC,GAA/C5H,EAAK6H,EAAA,GAAE5H,EAAM4H,EAAA,GACd1H,GADsB0H,EAAA,GACbnI,EAASS,QAClB8B,EAAUyE,KAAKtG,YAEfG,EAAMC,IAAU,IAAMnC,GAAWsG,OAAO,OAAOA,OAAO,KAE5DpE,EAAIoE,OAAO,WACNmD,KAAK,GAADvI,OAAIG,EAASqI,cAEtBxH,EAAIoE,OAAO,aACNmD,KAAK,GAADvI,OAAIG,EAASsI,SAEtB,IAAI1C,EAAI9E,MACG+E,OAAO,CAAC,GAAKnH,EAAe,KAC5BwF,MAAM,CAAC,EAAG5D,IACjBiI,EAAIzH,MACGoD,MAAM,CAAC3D,EAAQ,IAEpBuE,EAAgBkC,KAAKwB,MAAM5H,KAAK,GAEhCoE,EADcgC,KAAKwB,MAAM5H,KAAK,GACGkE,EAAgB,EAEnD2B,EAAS7H,EAAE8H,UAAU5F,KACzB2F,EAAOE,EAAIjI,EAAasG,EACxByB,EAAOb,EAAyBtF,EAAM0E,GAA1B,EAAEF,GAEdc,EAAIa,EAAOT,SAASJ,GAGpB,IAAMV,EAAQrE,EAAIoE,OAAO,YACnBwD,EAAQ5H,EAAIoE,OAAO,YAEnByD,EAAW,SAAC5F,EAAOC,EAAOC,GAC9B,OAAOA,EAAKC,QAAQH,KAAWC,CACjC,EAEMP,EAAWJ,EAAKK,KAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAO,IAAEE,OAAO6F,GAC3CvD,EAAiB,CAAC,EAExB3C,EAASC,KAAI,SAAC8C,EAAGnC,GAAC,OAAK+B,EAAeI,GAAKnC,EAAI,CAAC,IAEhD8B,EAAMvF,KAAKmB,IAAc8E,GACVK,MAAMjB,GACNkB,YAAW,SAAC9C,GAAC,OAAKA,EAAE,GAAK,GAAKA,EAAE,EAAIZ,EAASjD,OAAM,WAAAM,OAAc2C,EAASY,EAAE,IAAO,EAAE,IACrF+C,SAAS,IAExBjB,EAAME,UAAU,cACTpE,KAAK,YAAY,GAADnB,OAAKgC,KAAKsC,IAAI,IAAIa,EAAoB,MAG7DuD,EAAE1C,OAAO,CAAC,EAAqC,IAAlC/E,IAAOsB,GAAM,SAAAM,GAAC,OAAIA,EAAEsF,UAAU,MAC3CS,EAAM9I,KAAKmB,IAAYyH,IAEvBE,EAAMrD,UAAU,cACTpE,KAAK,YAAa,MAEzBH,EAAIuE,UAAU,aACThD,KAAKA,GACLuG,KAAK,QACH3H,KAAK,YAAa,cAClBA,KAAK,KAAK,SAAA0B,GAAC,OAAIkD,EAAElD,EAAE0D,WAAajB,EAAezC,EAAEC,SAAW,GAAI,IAChE3B,KAAK,SAAS,SAAA0B,GAAC,OAAIkD,EAAElD,EAAE2D,SAAWlB,EAAezC,EAAEC,SAAW,IAAOiD,EAAElD,EAAE0D,WAAajB,EAAezC,EAAEC,SAAW,GAAI,IACtH3B,KAAK,KAAK,SAAA0B,GAAC,OAAI6F,EAAE7F,EAAEsF,WAAW,IAC9BhH,KAAK,UAAU,SAAA0B,GAAC,OAAInC,EAASgI,EAAE7F,EAAEsF,WAAW,IAC5ChH,KAAK,QAAQ,SAAA0B,GAAC,OAAIjC,EAAOiC,EAAEkF,KAAKlF,EAAEmF,QAAQ,IAC1C7G,KAAK,QAAS,YACdA,KAAK,eAAe,GAADnB,OAAKgC,KAAKsC,IAAI,GAAK,EAAIa,KAC1ChE,KAAK,SAAU,SAGtB,IADA,IAAI4H,EAAuB,GAClBxF,EAAI,EAAGA,EAAI1E,EAAa,EAAG0E,IAClCwF,EAAWtD,KAAKlC,EAAI,IAGtBvC,EAAIuE,UAAU,aACThD,KAAKwG,GACLD,KAAK,QACH3H,KAAK,YAAa,cAClBA,KAAK,KAAK,SAAA0B,GAAO,IAAI4D,EAAOxF,MAGX,OAFAwF,EAAKC,OAAOX,EAAElD,GAAI,GAClB4D,EAAKE,OAAOZ,EAAElD,GAAInC,EAAO,IAClB+F,CACT,IACftF,KAAK,OAAQ,QACbA,KAAK,SAAUuB,EAAUA,EAAmB,UAAI,oBAChDvB,KAAK,eAAgB,GACrBA,KAAK,QAAS,YAErB,IAAMyD,EAAU3D,IAAU,QAAQmE,OAAO,gBAEzCnE,IAAa,aACNoB,GAAG,aAAa,SAASyD,EAAOjD,GAC/B5B,IAAU6E,EAAMkD,QACb7H,KAAK,qBAAsBF,IAAU6E,EAAMkD,QAAQ7H,KAAK,iBACxDA,KAAK,eAAgB,KACrBA,KAAK,SAAU,SAEhByD,EAAQhD,MAAM,aAAc,WACnB2G,KAAK,eAAAvI,OAAegC,KAAKC,MAAMY,EAAEsF,YAAW,eAAAnI,OAAc6C,EAAEC,QAAO,cAAA9C,OACtD6C,EAAEkF,IAAG,OACE,QAAdlF,EAAEmF,QAAiB,YAAAhI,OAAe6C,EAAEmF,QAAO,MAAO,KACpC,QAAdnF,EAAEoF,QAAiB,YAAAjI,OAAe6C,EAAEoF,SAAY,IACnE,IACC5F,GAAG,aAAa,SAASyD,GACxBlB,EACGhD,MAAM,MAAOkE,EAAMmD,MAAQ,GAAK,MAChCrH,MAAM,OAAQkE,EAAMoD,MAAQ,GAAK,KACtC,IACC7G,GAAG,YAAY,SAASyD,GAEvB7E,IAAU6E,EAAMkD,QACb7H,KAAK,eAAgBF,IAAU6E,EAAMkD,QAAQ7H,KAAK,uBAClDA,KAAK,qBAAsB,MAC3BA,KAAK,SAAU,SAElByD,EAAQhD,MAAM,aAAc,SAC9B,IAEN,IAAMuH,EAAO5G,EAAKK,KAAI,SAAAC,GAAC,OAAIA,EAAEkF,GAAG,IAAE/E,OAAO6F,GACnCO,EAAW7G,EAAKK,KAAI,SAAAC,GAAC,OAAIA,EAAEmF,OAAO,IAAEhF,OAAO6F,GAE3CQ,EAAeF,EAAKzJ,OAApB2J,EAA8BD,EAAS1J,OACvC4J,EAAkB,IAAlBA,EAA8B,IAAID,EAAYA,EAC9CE,EAAaD,EAAiBD,EAAc,EAE9CG,EAAmBC,OAAOC,YAAYP,EAAKvG,KAAI,SAAAmF,GAAG,MAAI,CAACA,EAAK,IAAI4B,IAAM,KAC1EpH,EAAKK,KAAI,SAASC,GAChB2G,EAAiB3G,EAAEkF,KAAK6B,IAAI/G,EAAEmF,QAChC,IACArC,QAAQC,IAAI4D,GAEZ,IAAMK,EAAa7I,EAAIoE,OAAO,eAC9B+D,EAAKvG,KAAI,SAASmF,EAAKxE,GACrB6F,EAASxG,KAAI,SAASoF,EAAS8B,GAC7B,IAAIC,EAASF,EACE3I,OAAO,QACPC,KAAK,IAAKF,MAAY6G,KAAK7G,KAAiB+I,KAAKT,IACjDpI,KAAK,YAAY,aAADnB,OAAeuD,EAAI8F,EAAcC,EAAc,iDAAAtJ,QAC1B,EAAdqJ,EAAkBS,GAAKT,EAAcC,EAAe,MAEtFtB,KAAWpH,EAAOmH,IAAQyB,EAAiBzB,GAAKkC,IAAIjC,GACtD+B,EAAO5I,KAAK,OAAQP,EAAOmH,GAAKC,IAGhC+B,EAAO5I,KAAK,OAAQ,UAExB,IAEA0I,EACG3I,OAAO,QACPqH,KAAKR,GACL5G,KAAK,YAAY,aAADnB,OAAeuD,EAAI8F,EAAcC,EAAc,KAAAtJ,QAAKsJ,EAAe,iBACnFnI,KAAK,cAAe,MACzB,IAEAiI,EAASxG,KAAI,SAASoF,EAASzE,GAC7BsG,EACG3I,OAAO,QACPqH,KAAKP,GACL7G,KAAK,YAAY,aAADnB,OAAesJ,EAAc,KAAAtJ,QAAoB,EAAdqJ,EAAkB9F,GAAK8F,EAAcC,EAAe,MACvGnI,KAAK,cAAe,QACzB,IAGAe,IAAUC,gBACZ,KAAClD,CAAA,CAzTsB,CAASiL,KA4bnBC,cAAwBlL,GC5dvCmL,IAAS9H,OACPoB,cAAC2G,IAAMC,WAAU,CAAA7G,SACfC,cAACzE,EAAmB,MAEtBsL,SAASC,eAAe,Q","file":"static/js/main.1e0c0bb2.chunk.js","sourcesContent":["import {\n  ArrowTable,\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport * as d3 from \"d3\"\nimport { Slider, ConfigProvider } from 'antd';\nimport legend from 'd3-svg-legend'\n\nconst _ = require('lodash');\n\n\nvar NUM_EPISODES: number;\nvar D3_DIV_ID: string;\n\ntype dataObj = {\n  index: number,\n  episode: number,\n  act: string,\n  chapter: string,\n  segment: string,\n  start_time: number,\n  end_time: number,\n  viewership: number\n}\n\ninterface State {\n  zoom: [number,number]\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass ViewershipComponent extends StreamlitComponentBase<State> {\n  private get_data(): dataObj[] {\n    const table: ArrowTable = this.props.args[\"data\"];\n\n    var data : dataObj[] = [];\n    const num_columns = table.columns;\n    // Itterate from 1 because of headerRow\n    for (let rowIndex = 1; rowIndex < table.rows; rowIndex++) {\n      const row = d3.range(0, num_columns).map((columnIndex) => {\n        const { classNames, content, id, type } = table.getCell(rowIndex, columnIndex);\n        return content?.toString()\n      });\n\n      data.push({index:rowIndex,\n        episode:parseInt(row[1]),\n        act:row[2],\n        chapter:row[3],\n        segment:row[4],\n        start_time:parseFloat(row[5]),\n        end_time:parseFloat(row[6]),\n        viewership:parseFloat(row[7])});\n    }\n\n    return data;\n  }\n\n  private get_metadata() {\n    return this.props.args.metadata\n  }\n\n  private get_theme() {\n    return this.props.theme\n  }\n\n  private get_dimensions(): [number, number, {top:number, right:number, bottom:number, left:number}] {\n    // set the dimensions and margins of the graph\n    const margin = {top: 30, right: 220, bottom: 30, left: 80},\n          width = 1200 - margin.left - margin.right,\n          height = 600 - margin.top - margin.bottom;\n\n    return [width, height, margin]\n  }\n\n\n\n  public componentDidMount = (): void => {\n    const data = this.get_data(),\n          metadata = this.get_metadata(),\n          [width, height, margin] = this.get_dimensions(),\n          colour = metadata.colour,\n          stTheme = this.get_theme();\n\n    this.setState({ zoom: [1, NUM_EPISODES] })\n\n    function resizeToFit(svg) {\n      // get container + svg aspect ratio\n      var container = d3.select(svg.node().parentNode),\n          width = parseInt(svg.style(\"width\")),\n          height = parseInt(svg.style(\"height\")),\n          aspect = width / height;\n\n      // add viewBox and preserveAspectRatio properties,\n      // and call resize so that svg resizes on inital page load\n      svg.attr(\"viewBox\", \"0 0 \" + width + \" \" + height)\n          .attr(\"perserveAspectRatio\", \"xMinYMid\")\n          .call(resize);\n\n      d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize);\n\n      // get width of container and resize svg to fit it\n      function resize() {\n          var targetWidth = parseInt(container.style(\"width\"));\n          svg.attr(\"width\", targetWidth);\n          svg.attr(\"height\", Math.round(targetWidth / aspect));\n          Streamlit.setFrameHeight();\n      }\n    }\n\n\n    // append the svg object to the body of the page\n    const svg = d3.select(\"#\" + D3_DIV_ID)\n                  .append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                    .call(resizeToFit)\n                  .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Add a clipPath: everything out of this area won't be drawn.\n    var clip = svg.append(\"defs\").append(\"svg:clipPath\")\n                  .attr(\"id\", \"clip\")\n                  .append(\"svg:rect\")\n                  .attr(\"width\", width )\n                  .attr(\"height\", height )\n                  .attr(\"x\", 0)\n                  .attr(\"y\", 0);\n\n    // Initialize the X and Y axis\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height})`)\n        .attr(\"id\", \"myXaxis\");\n    svg.append(\"g\")\n        .attr(\"id\", \"myYaxis\");\n\n    d3.select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"svg-tooltip\")\n      .style(\"font-family\", `-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple   Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`)\n      .style(\"border-radius\", \".1rem\")\n      .style(\"font-size\", \"14px\")\n      .style(\"max-width\", \"320px\")\n      .style(\"text-overflow\", \"ellipsis\")\n      .style(\"white-space\", \"pre\")\n      .style(\"z-index\", \"300\")\n      .style(\"background\", \"rgba(69,77,93,.9)\")\n      .style(\"color\", \"#fff\")\n      .style(\"display\", \"block\")\n      .style(\"padding\", \".2rem .4rem\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\");\n\n    svg.append(\"text\")\n      .attr(\"id\", \"yLabel\")\n      .attr(\"transform\", \"translate(\" + (width / 2) + \" ,\" + (-10) + \")\")\n      .style(\"font-size\", 25)\n      .style(\"text-anchor\", \"middle\");\n\n    svg.append(\"text\")\n        .attr(\"id\", \"topLabel\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -margin.left)\n        .attr(\"x\", -(height / 2))\n        .attr(\"dy\", \"1em\")\n        .style(\"font-size\", 25)\n        .style(\"text-anchor\", \"middle\");\n\n    svg.append(\"g\")\n        .attr(\"class\", \"legendGrid\")\n        .attr(\"transform\", `translate(${width + 20},${height - 20})`);\n\n    Streamlit.setFrameHeight();\n  }\n\n\n\n  public componentDidUpdate(): void {\n    const data = this.get_data(),\n          metadata = this.get_metadata(),\n          [width, height, margin] = this.get_dimensions(),\n          colour = metadata.colour,\n          stTheme = this.get_theme();\n\n    const svg = d3.select(\"#\" + D3_DIV_ID).select(\"svg\").select(\"g\");\n\n    svg.select(\"#yLabel\")\n        .text(`${metadata.granularity}`);\n\n    svg.select(\"#topLabel\")\n        .text(`${metadata.metric}`);\n\n    var x = d3.scaleLinear()\n              .domain([0.5, NUM_EPISODES + 0.5])\n              .range([0, width]),\n        y = d3.scaleLinear()\n              .range([height, 0]);\n\n    const start_episode = this.state.zoom[0],\n          end_episode = this.state.zoom[1],\n          displayed_episodes = end_episode-start_episode + 1;\n\n    var myZoom = _.cloneDeep(d3.zoomIdentity);\n    myZoom.k = NUM_EPISODES/displayed_episodes;\n    myZoom.x = (1-start_episode) * (width/displayed_episodes);\n\n    x = myZoom.rescaleX(x);\n\n\n    const xAxis = svg.select(\"#myXaxis\"),\n          yAxis = svg.select(\"#myYaxis\");\n\n    const distinct = (value, index, self) => {\n      return self.indexOf(value) === index;\n    }\n\n    const episodes = data.map(d => d.episode).filter(distinct),\n          episode_x_axis = {};\n\n    episodes.map((e, i) => episode_x_axis[e] = i + 1);\n    // Update the X axis\n    xAxis.call(d3.axisBottom(x)\n                  .ticks(displayed_episodes)\n                  .tickFormat((i) => i-1 > -1 && i-1 < episodes.length ? `Episode ${episodes[i-1]}` : \"\")\n                  .tickSize(0)\n              );\n    xAxis.selectAll(\".tick text\")\n          .attr(\"font-size\", `${Math.min(150/displayed_episodes, 20)}`);\n\n    // Update the Y axis\n    y.domain([0, d3.max(data, d => d.viewership) * 1.1 ]);\n    yAxis.call(d3.axisLeft(y));\n\n    yAxis.selectAll(\".tick text\")\n          .attr(\"font-size\", \"15\");\n\n    svg.selectAll(\".dataRect\")\n        .data(data)\n        .join(\"rect\") // Add a new rect for each new elements\n          .attr(\"clip-path\", \"url(#clip)\")\n          .attr(\"x\", d => x(d.start_time + episode_x_axis[d.episode] - 0.5))\n          .attr(\"width\", d => x(d.end_time + episode_x_axis[d.episode] - 0.5) - x(d.start_time + episode_x_axis[d.episode] - 0.5))\n          .attr(\"y\", d => y(d.viewership))\n          .attr(\"height\", d => height - y(d.viewership))\n          .attr(\"fill\", d => colour[d.act][d.chapter])\n          .attr(\"class\", \"dataRect\")\n          .attr('stroke-width', `${Math.min(0.7, 4/((displayed_episodes)))}`)\n          .attr(\"stroke\", \"white\");\n\n    var gridLineXs: Number[] = [];\n    for (let i = 1; i < NUM_EPISODES+1; i++) {\n      gridLineXs.push(i + 0.5)\n    }\n\n    svg.selectAll(\".gridLine\")\n        .data(gridLineXs)\n        .join(\"path\")\n          .attr(\"clip-path\", \"url(#clip)\")\n          .attr(\"d\", d => { var path = d3.path()\n                            path.moveTo(x(d), 0)\n                            path.lineTo(x(d), height+10)\n                            return path;\n                          })\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", stTheme ? stTheme[\"textColor\"] : \"rgb(150,150,150)\")\n          .attr(\"stroke-width\", 1)\n          .attr(\"class\", \"gridLine\")\n\n    const tooltip = d3.select(\"body\").select(\".svg-tooltip\");\n\n    d3.selectAll(\".dataRect\")\n          .on(\"mouseover\", function(event, d) {\n            d3.select(event.target)\n              .attr('stroke-width-cache', d3.select(event.target).attr('stroke-width'))\n              .attr('stroke-width', '1')\n              .attr(\"stroke\", \"black\");\n\n              tooltip.style(\"visibility\", \"visible\")\n                      .text(`Viewership: ${Math.round(d.viewership)}\\nEpisode: ${d.episode}\\n` +\n                            `Act: ${d.act}\\n` +\n                            (d.chapter !== \"NVT\" ? `Chapter: ${d.chapter}\\n` : \"\") +\n                            (d.segment !== \"NVT\" ? `Segment: ${d.segment}` : \"\"));\n          })\n          .on(\"mousemove\", function(event) {\n            tooltip\n              .style(\"top\", event.pageY - 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", function(event) {\n            // change the selection style\n            d3.select(event.target)\n              .attr('stroke-width', d3.select(event.target).attr('stroke-width-cache'))\n              .attr('stroke-width-cache', null)\n              .attr(\"stroke\", \"white\");\n\n            tooltip.style(\"visibility\", \"hidden\");\n          })\n\n    const acts = data.map(d => d.act).filter(distinct)\n    const chapters = data.map(d => d.chapter).filter(distinct);\n\n    const gridShape = {x:acts.length, y:chapters.length},\n          gridSize = {width:100, height:100*gridShape.y/gridShape.x},\n          symbolSize = gridSize.width / gridShape.x * 5\n\n    var format_structure = Object.fromEntries(acts.map(act => [act, new Set()]))\n    data.map(function(d) {\n      format_structure[d.act].add(d.chapter)\n    });\n    console.log(format_structure)\n\n    const legendGrid = svg.select(\".legendGrid\");\n    acts.map(function(act, i) {\n      chapters.map(function(chapter, j) {\n        var square = legendGrid\n                      .append(\"path\")\n                      .attr(\"d\", d3.symbol().type(d3.symbolSquare).size(symbolSize))\n                      .attr(\"transform\", `translate(${i / gridShape.x * gridSize.width},\n                                          ${(-gridShape.y + 1 + j) / gridShape.y * gridSize.height})`);\n\n        if (chapter in colour[act] && format_structure[act].has(chapter)) {\n          square.attr(\"fill\", colour[act][chapter]);\n        }\n        else {\n          square.attr(\"fill\", \"#787878\");\n        }\n      });\n\n      legendGrid\n        .append(\"text\")\n        .text(act)\n        .attr(\"transform\", `translate(${i / gridShape.x * gridSize.width},${-gridSize.height}) rotate(90)`)\n        .attr(\"text-anchor\", \"end\")\n    });\n\n    chapters.map(function(chapter, i) {\n      legendGrid\n        .append(\"text\")\n        .text(chapter)\n        .attr(\"transform\", `translate(${gridSize.width},${(-gridShape.y + 1 + i) / gridShape.y * gridSize.height})`)\n        .attr(\"text-anchor\", \"start\")\n    });\n\n\n    Streamlit.setFrameHeight();\n  }\n\n\n\n  public render = (): ReactNode => {\n    const data = this.get_data(),\n          [width, height, margin] = this.get_dimensions(),\n          stTheme = this.get_theme();\n\n    const distinct = (value, index, self) => {\n      return self.indexOf(value) === index;\n    }\n\n    const episodes = data.map(d => d.episode.toString())\n                          .filter(distinct);\n\n    NUM_EPISODES = episodes.length;\n    D3_DIV_ID = \"viewership_component_\" + this.props.args[\"key\"];\n\n    var marks = {}\n    episodes.map((d, i) => marks[i+1] = `${d}`)\n\n    return (\n      <span>\n        <div id={D3_DIV_ID}></div>\n\n        <div style={{margin: `40px ${margin.right/2}px 40px ${margin.left/2}px`}} id={D3_DIV_ID+\"_silder\"}>\n        <ConfigProvider\n          theme={{\n            token: {\n              colorPrimary: stTheme?.secondaryBackgroundColor,\n              colorFillContentHover: stTheme?.secondaryBackgroundColor,\n              colorPrimaryBorder: stTheme?.secondaryBackgroundColor,\n              colorPrimaryBorderHover: stTheme?.secondaryBackgroundColor\n            }\n          }}\n        >\n        <Slider\n          range={true}\n          id=\"zoomSlider\"\n          min={1}\n          max={NUM_EPISODES}\n          marks={marks}\n          step={1}\n          defaultValue={[1, NUM_EPISODES]}\n          onAfterChange={this.changeEpisodeBounds}\n          tooltip={{open: false}}\n          disabled={this.props.disabled}\n        />\n        </ConfigProvider>\n        </div>\n      </span>\n    )\n  }\n\n  private changeEpisodeBounds = (value, duration=800) => {\n    const margin = {top: 30, right: 220, bottom: 30, left: 80},\n          width = 1200 - margin.left - margin.right,\n          height = 600 - margin.top - margin.bottom;\n\n    const start_episode = value[0],\n          end_episode = value[1],\n          displayed_episodes = end_episode-start_episode + 1,\n          svg = d3.select(\"#\" + D3_DIV_ID).select(\"svg\").select(\"g\"),\n          xAxis = svg.select(\"#myXaxis\");\n\n    var episodes: any[] = [],\n        episode_x_axis = {};\n\n    svg.selectAll(\".dataRect\")\n        .each(function(d) {\n          episodes.push(d.episode)\n        });\n\n    const distinct = (value, index, self) => {\n      return self.indexOf(value) === index;\n    }\n\n    episodes = episodes.filter(distinct);\n\n    episodes.map((e, i) => episode_x_axis[e] = i + 1);\n    console.log(episodes)\n    console.log(episode_x_axis)\n\n\n    function zoomChart(event) {\n      var x = d3.scaleLinear()\n                .domain([0.5, NUM_EPISODES+0.5])\n                .range([0, width]),\n          newX = event.transform.rescaleX(x);\n\n      // update Xaxis with these new boundaries\n      xAxis.call(d3.axisBottom(newX)\n                    .ticks(displayed_episodes)\n                    .tickFormat((i) => i-1 > -1 && i-1 < episodes.length ? `Episode ${episodes[i-1]}` : \"\")\n                    .tickSize(0)\n                  );\n      xAxis.selectAll(\".tick text\")\n            .attr(\"font-size\", `${Math.min(150/displayed_episodes, 20)}`);\n\n      svg.selectAll(\".dataRect\")\n            .attr(\"x\", d => newX(d.start_time + episode_x_axis[d.episode] - 0.5))\n            .attr(\"width\", d => newX(d.end_time + episode_x_axis[d.episode] - 0.5) - newX(d.start_time + episode_x_axis[d.episode] - 0.5))\n            .attr('stroke-width', `${Math.min(0.7, 4/(displayed_episodes))}`);\n\n      svg.selectAll(\".gridLine\")\n          .attr(\"d\", d => { var path = d3.path()\n                            path.moveTo(newX(d), 0)\n                            path.lineTo(newX(d), height+10)\n                            return path;\n          });\n\n    }\n\n\n    var zoom = d3.zoom()\n          .scaleExtent([1, NUM_EPISODES])\n          .on(\"zoom\", zoomChart);\n\n    var myZoom = _.cloneDeep(d3.zoomIdentity);\n    myZoom.k = NUM_EPISODES/displayed_episodes;\n    myZoom.x = (1-start_episode) * (width/displayed_episodes);\n\n    svg.transition().duration(duration)\n        .call(zoom.transform, myZoom);\n\n    this.setState({ zoom: [start_episode, end_episode] })\n  }\n}\n\n\nexport default withStreamlitConnection(ViewershipComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ViewershipComponent from \"./ViewershipComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ViewershipComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}