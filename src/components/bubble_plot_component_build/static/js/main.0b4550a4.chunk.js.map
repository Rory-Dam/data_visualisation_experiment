{"version":3,"sources":["BubblePlotComponent.tsx","index.tsx"],"names":["D3_DIV_ID","BubblePlotComponent","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","componentDidMount","_this$get_dimensions","get_dimensions","_this$get_dimensions2","_slicedToArray","width","height","margin","svg","d3","append","attr","left","right","top","bottom","container","node","parentNode","parseInt","style","aspect","resize","targetWidth","Math","round","Streamlit","setFrameHeight","window","on","render","props","key","_jsxs","children","_jsx","id","className","_createClass","value","table","this","data","num_columns","columns","_loop","rowIndex","row","map","columnIndex","_table$getCell","getCell","content","classNames","type","toString","push","index","episode","act","chapter","segment","startTime","parseFloat","endTime","viewership","rows","metadata","theme","_document$getElementB","_document$getElementB2","_this2","get_data","get_metadata","_this$get_dimensions3","_this$get_dimensions4","colour","select","chapterXaxis","chapter_order","d","i","NUM_CHAPTERS","Object","keys","timeSortedData","sort","a","b","x","domain","range","y","radius","sqrt","PI","min","xAxis","yAxis","tickStrings","ticks","tickFormat","tickSize","selectAll","doSwapView","empty","acts","filter","self","indexOf","actStarts","fromEntries","actStops","actLineData","entries","start","stop","join","path","moveTo","lineTo","act_colour","text","tooltip","event","target","metric_postfix","pageY","pageX","metric","MAX_TIME_POWER10","pow","floor","log10","legendDomain","legendRange","legendRadiusScale","sizeLegend","legend","legendSize","ascending","title","shape","shapePadding","labelOffset","orient","scale","zoom","scaleExtent","extent","isNaN","transform","k","newY","rescaleY","animateRippleButton","clientX","offsetLeft","clientY","offsetTop","ripple","document","createElement","setTimeout","remove","getElementById","dispatchEvent","WheelEvent","deltaY","swapView","showAll","chapterButtonContainer","swapShowChapter","backgroundHex","replace","bgLuminance","substr","max","getReadableTextColour","chapterOrder","duration","undefined","maxEpisode","each","episodeX","transition","console","log","toEpisodeView","chapterX","toChapterView","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode"],"mappings":"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","file":"static/js/main.0b4550a4.chunk.js","sourcesContent":["import {\n  ArrowTable,\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from 'streamlit-component-lib'\nimport React, { ReactNode } from 'react'\nimport * as d3 from 'd3'\nimport legend from 'd3-svg-legend'\nimport './BubblePlotComponent.scss'\n\nlet D3_DIV_ID: string\n\ninterface dataObj {\n  index: number\n  episode: number\n  act: string\n  chapter: string\n  segment: string\n  startTime: number\n  endTime: number\n  viewership: number\n}\n\n/**\n * React-based Streamlit component implementing a custom bubble plot meant to represent viewership data.\n * Each bubble represents an individual segment, its height indicating viewership and its area indication segments length.\n * The bubbles are grouped based on acts, facilitating easy comparison between acts.\n * Both the concentration of viewership for each act, as well as the variance in viewership within and\n * across acts are easily identifiable through the position of the bubbles within each group.\n */\nclass BubblePlotComponent extends StreamlitComponentBase {\n  /**\n   * Convert the data passed by the Streamlit webpage from an ArrowTable to a DataObj[].\n   *\n   * @returns {dataObj[]} Data passed by the Streamlit webpage.\n   */\n  private get_data (): dataObj[] {\n    const table: ArrowTable = this.props.args.data\n\n    const data: dataObj[] = []\n    const num_columns = table.columns\n    // Itterate from 1 because of headerRow\n    for (let rowIndex = 1; rowIndex < table.rows; rowIndex++) {\n      const row = d3.range(0, num_columns).map((columnIndex) => {\n        const { classNames, content, id, type } = table.getCell(rowIndex, columnIndex)\n        return content?.toString()\n      })\n\n      data.push({\n        index: rowIndex,\n        episode: parseInt(row[1]),\n        act: row[2],\n        chapter: row[3],\n        segment: row[4],\n        startTime: parseFloat(row[5]),\n        endTime: parseFloat(row[6]),\n        viewership: parseFloat(row[7])\n      })\n    }\n\n    return data\n  }\n\n  /**\n   * Get the metadata passed by the Streamlit webpage.\n   *\n   * @returns {any[]} Metadata passed by the Streamlit webpage.\n   */\n  private get_metadata (): any {\n    return this.props.args.metadata\n  }\n\n  /**\n   * Get the theme passed by the Streamlit webpage.\n   *\n   * @returns {any[]} Theme passed by the Streamlit webpage.\n   */\n  private get_theme (): any {\n    return this.props.theme\n  }\n\n  /**\n   * Get the dimension for the components comprimised of width, height and margins.\n   *\n   * @returns {[number, number, { top: number, right: number, bottom: number, left: number }]} Dimensions.\n   */\n  private get_dimensions (): [number, number, { top: number, right: number, bottom: number, left: number }] {\n    // set the dimensions and margins of the graph\n    const margin = { top: 80, right: 150, bottom: 80, left: 80 }\n    const width = 1200 - margin.left - margin.right\n    const height = 600 - margin.top - margin.bottom\n\n    return [width, height, margin]\n  }\n\n  public componentDidMount = (): void => {\n    const [width, height, margin] = this.get_dimensions()\n\n    // Resize the complete component to change with adjusting screensizes.\n    function resizeToFit (svg): void {\n      // Get container + svg aspect ratio.\n      const container = d3.select(svg.node().parentNode)\n      const width = parseInt(svg.style('width'))\n      const height = parseInt(svg.style('height'))\n      const aspect = width / height\n\n      // Add viewBox and preserveAspectRatio properties,\n      // and call resize so that svg resizes on inital page load.\n      svg.attr('viewBox', `0 0 ${width} ${height}`)\n        .attr('perserveAspectRatio', 'xMinYMid')\n        .call(resize)\n\n      d3.select(window).on(`resize.${container.attr('id')}`, resize)\n\n      // Get width of container and resize svg to fit it.\n      function resize (): void {\n        const targetWidth = parseInt(container.style('width'))\n        svg.attr('width', targetWidth)\n        svg.attr('height', Math.round(targetWidth / aspect))\n        Streamlit.setFrameHeight()\n      }\n    }\n\n    // Append the svg object to the body of the page.\n    const svg = d3.select('#' + D3_DIV_ID)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .call(resizeToFit)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n    // Add a clipPath: everything out of this area won't be drawn.\n    svg.append('defs').append('svg:clipPath')\n      .attr('id', 'clip')\n      .append('svg:rect')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('x', 0)\n      .attr('y', 0)\n\n    // Add a rectange to register zoom actions on the plot.\n    svg.append('rect')\n      .attr('id', 'zoomRect')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height)\n      .style('fill', 'none')\n      .style('pointer-events', 'all')\n      .attr('transform', `translate(${-margin.left}, 0)`)\n\n    // Initialize the X and Y axis.\n    svg.append('g')\n      .attr('transform', `translate(0,${height})`)\n      .attr('id', 'myXaxis')\n    svg.append('g')\n      .attr('id', 'myYaxis')\n\n    // Initialize the tooltip.\n    d3.select('body')\n      .append('div')\n      .attr('class', 'svg-tooltip')\n      .style('font-family', '-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple   Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"')\n      .style('border-radius', '.1rem')\n      .style('font-size', '14px')\n      .style('max-width', '320px')\n      .style('text-overflow', 'ellipsis')\n      .style('white-space', 'pre')\n      .style('z-index', '300')\n      .style('background', 'rgba(69,77,93,.9)')\n      .style('color', '#fff')\n      .style('display', 'block')\n      .style('padding', '.2rem .4rem')\n      .style('position', 'absolute')\n      .style('visibility', 'hidden')\n\n    // Initialize the metric label.\n    svg.append('text')\n      .attr('id', 'yLabel')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', -margin.left)\n      .attr('x', -(height / 2))\n      .attr('dy', '1em')\n      .style('font-size', 20)\n      .style('text-anchor', 'middle')\n\n    // Initialize the legend.\n    svg.append('g')\n      .attr('class', 'legendSize')\n      .attr('transform', `translate(${width}, 20)`)\n\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidUpdate (): void {\n    const data = this.get_data()\n    const metadata = this.get_metadata()\n    const [width, height, margin] = this.get_dimensions()\n    const colour = metadata.colour\n    const svg = d3.select('#' + D3_DIV_ID).select('svg').select('g')\n\n    // Create mapping from chapters to position on X-axis.\n    const chapterXaxis = {}\n\n    metadata.chapter_order.map((d, i) => {\n      if (!(d in chapterXaxis)) {\n        chapterXaxis[d] = i + 1\n      }\n      return 0\n    })\n\n    const NUM_CHAPTERS = Object.keys(chapterXaxis).length\n    // Sort the data by segment time length so that smaller bubbles are displayed on top of the larger ones.\n    const timeSortedData = data.sort((a, b) => {\n      if (a.endTime - a.startTime > b.endTime - b.startTime) {\n        return -1\n      } else if (a.endTime - a.startTime < b.endTime - b.startTime) {\n        return 1\n      }\n      return 0\n    })\n\n    // Initialize the x, y and radius scales.\n    const x = d3.scaleLinear()\n      .domain([0, NUM_CHAPTERS + 1])\n      .range([0, width])\n    const y = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.viewership) * 1.1])\n      .range([height, 0])\n\n    // The radius scales so that the area of the bubble represents the segment time.\n    // It is scaled so that in episode view the average bubble will take up half of its episodes space.\n    const radius = d3.scaleLinear()\n      .domain([0, Math.sqrt(d3.mean(data, d => d.endTime - d.startTime)) / Math.PI])\n      .range([0, Math.min(30, (width / d3.max(data, d => d.episode) / 2 * 0.5))])\n\n    const xAxis = d3.select('#myXaxis')\n    const yAxis = d3.select('#myYaxis')\n\n    const tickStrings = {}\n    Object.keys(chapterXaxis).map((d, i) => {\n      tickStrings[i + 1] = d\n      return 0\n    })\n\n    xAxis.call(d3.axisBottom(x)\n      .ticks(NUM_CHAPTERS)\n      .tickFormat(d => tickStrings[d]))\n\n    yAxis.call(d3.axisLeft(y)\n      .tickSize(-width))\n\n    yAxis.selectAll('text')\n      .style('font-size', '15')\n\n    let doSwapView = false\n    if (svg.select('#dataCircle').empty() === false) {\n      if (svg.select('#dataCircle').attr('view') === 'episode') {\n        doSwapView = true\n      }\n    }\n\n    const distinct = (value, index, self): boolean => {\n      return self.indexOf(value) === index\n    }\n\n    // Create act lines which differentiate between acts in the episode view.\n    const acts = data.map(d => d.act).filter(distinct)\n    const actStarts = Object.fromEntries(acts.map(act => [act, d3.max(data.map(d => d.episode))]))\n    const actStops = Object.fromEntries(acts.map(act => [act, 0]))\n    data.map(function (d) {\n      if (d.episode < actStarts[d.act]) {\n        actStarts[d.act] = d.episode\n      }\n      if (d.episode > actStops[d.act]) {\n        actStops[d.act] = d.episode\n      }\n      return 0\n    })\n\n    const actLineData: Object[] = []\n    for (let i = 0; i < Object.entries(actStarts).map(d => d[0]).length; i++) {\n      const act = Object.entries(actStarts).map(d => d[0])[i]\n      actLineData.push({ act, start: actStarts[act] - 0.5, stop: actStops[act] + 0.5 })\n    }\n\n    svg.selectAll('.actLine')\n      .data(actLineData)\n      .join('path')\n      .attr('clip-path', 'url(#clip)')\n      .attr('d', () => {\n        const path = d3.path()\n        path.moveTo(0, 0)\n        path.lineTo(0, height)\n        return path\n      })\n      .attr('fill', 'none')\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1)\n      .style('stroke-dasharray', '4, 4')\n      .attr('class', 'actLine')\n\n    // Give acts different background colours in episode view.\n    svg.selectAll('.actRect')\n      .data(actLineData)\n      .join('rect')\n      .attr('clip-path', 'url(#clip)')\n      .style('pointer-events', 'none')\n      .attr('fill', d => metadata.act_colour[d.act])\n      .style('opacity', '0')\n      .attr('width', '0')\n      .attr('height', height)\n      .attr('class', 'actRect')\n\n    svg.selectAll('.actLabel')\n      .data(actLineData)\n      .join('text')\n      .text(d => d.act)\n      .attr('transform', 'translate(0, -5)')\n      .style('opacity', '0')\n      .style('text-anchor', 'middle')\n      .attr('class', 'actLabel')\n\n    const tooltip = d3.select('body').select('.svg-tooltip')\n\n    // Add a new circle for each element in timeSortedDate.\n    svg.selectAll('#dataCircle')\n      .data(timeSortedData)\n      .join('circle')\n      .attr('id', 'dataCircle')\n      .attr('view', 'chapter')\n      .attr('clip-path', 'url(#clip)')\n      .attr('r', d => radius(Math.sqrt(d.endTime - d.startTime) / Math.PI))\n      .attr('cx', d => x(chapterXaxis[d.chapter]))\n      .attr('cy', d => y(d.viewership))\n      .attr('fill', d => colour[d.chapter])\n      .style('opacity', '0.7')\n      .style('pointer-events', 'auto')\n      // Add the tooltip.\n      .on('mouseover', function (event, d) {\n        d3.select(event.target)\n          .attr('stroke-width', '1')\n          .attr('stroke', 'black')\n\n        tooltip.style('visibility', 'visible')\n          .text(`Viewership: ${Math.round(d.viewership)}${metadata.metric_postfix}\\nEpisode: ${d.episode}\\n` +\n                          `Act: ${d.act}\\nChapter: ${d.chapter}\\nSegment: ${d.segment}\\n` +\n                          `Start(s): ${d.startTime}\\nEnd(s): ${d.endTime}`)\n      })\n      .on('mousemove', function (event) {\n        tooltip\n          .style('top', `${event.pageY - 10}px`)\n          .style('left', `${event.pageX + 10}px`)\n      })\n      .on('mouseout', function (event) {\n        d3.select(event.target)\n          .attr('stroke-width', null)\n          .attr('stroke', null)\n\n        tooltip.style('visibility', 'hidden')\n      })\n      .attr('view', 'chapter')\n\n    svg.select('#yLabel')\n      .text(metadata.metric)\n\n    // Fill in legend.\n    const MAX_TIME_POWER10 = Math.pow(10, Math.floor(Math.log10(d3.max(data, d => (d.endTime - d.startTime)))))\n    const legendDomain = [0.1, 0.25, 0.5, 1].map(d => d * MAX_TIME_POWER10)\n    const legendRange = legendDomain.map(d => radius((Math.sqrt(d) / Math.PI)))\n\n    const legendRadiusScale = d3.scaleOrdinal()\n      .domain(legendDomain.map(d => `${d}s`))\n      .range(legendRange)\n\n    const sizeLegend = legend.legendSize()\n      .ascending(true)\n      .title('Segment Time')\n      .shape('circle')\n      .shapePadding(5)\n      .labelOffset(10)\n      .orient('vertical')\n      .scale(legendRadiusScale)\n\n    svg.select('.legendSize')\n      .call(sizeLegend)\n      .selectAll('circle')\n      .style('opacity', 0.5)\n\n    svg.select('.legendSize')\n      .selectAll('text')\n      .style('font-size', '20')\n\n    // Add zooming and scrolling to the plot.\n    // Both are only possible in the Y-axis.\n    const zoomChart = (event): void => {\n      if (isNaN(event.transform.k)) {\n        return\n      }\n      const newY = event.transform.rescaleY(y)\n      yAxis.call(d3.axisLeft(newY)\n        .tickSize(-width))\n\n      yAxis.selectAll('text')\n        .style('font-size', '15')\n\n      svg.selectAll('#dataCircle')\n        .attr('cy', function (d) { return newY(d.viewership) })\n    }\n\n    const zoom = d3.zoom()\n      .scaleExtent([1, 20])\n      .extent([[0, 0], [width, height]])\n      .on('zoom', zoomChart)\n\n    svg.select('#zoomRect')\n      .call(zoom)\n\n    // This is to fix the zoom after updating the component with new data or option choices.\n    document.getElementById('zoomRect')?.dispatchEvent(new WheelEvent('wheel', { deltaY: 1 }))\n    document.getElementById('zoomRect')?.dispatchEvent(new WheelEvent('wheel', { deltaY: -1 }))\n\n    if (doSwapView) {\n      this.swapView(metadata.chapter_order, 0)\n    }\n    this.showAll(0)\n\n    // Ripple effect on buttons: https://codepen.io/dazar-dev/pen/QWNyKMO\n    function animateRippleButton (event): void {\n      const ANIMATION_SPEED: number = 800\n\n      const x: number = event.clientX - event.target.offsetLeft\n      const y: number = event.clientY - event.target.offsetTop\n\n      const ripple: HTMLElement = document.createElement('div')\n\n      ripple.style.left = `${x}px`\n      ripple.style.top = `${y}px`\n      event.target.append(ripple)\n\n      setTimeout(() => {\n        ripple.remove()\n      }, ANIMATION_SPEED)\n    }\n\n    d3.select('#swap_view_button')\n      .on('click', (event) => { this.swapView(metadata.chapter_order); animateRippleButton(event) })\n\n    d3.select('#show_all_button')\n      .on('click', (event) => { this.showAll(); animateRippleButton(event) })\n\n    // !!!CHATGPT\n    // Choose a text colour between black and white based on the background colour.\n    function getReadableTextColour (backgroundHex): string {\n      // Remove the '#' symbol if present\n      backgroundHex = backgroundHex.replace('#', '')\n\n      // Parse the background hex colour components\n      const bgRed = parseInt(backgroundHex.substr(0, 2), 16)\n      const bgGreen = parseInt(backgroundHex.substr(2, 2), 16)\n      const bgBlue = parseInt(backgroundHex.substr(4, 2), 16)\n\n      // Calculate the relative luminance of the background colour\n      const bgLuminance = (0.299 * bgRed + 0.587 * bgGreen + 0.114 * bgBlue) / 255\n\n      // Calculate the target luminance for the text colour\n      const textLuminance = 0.1 // Adjust this value if desired\n\n      // Calculate the contrast ratio between the text and background colours\n      const contrastRatio = (Math.max(bgLuminance, textLuminance) + 0.05) / (Math.min(bgLuminance, textLuminance) + 0.05)\n\n      // If the contrast ratio is sufficient, return black or white accordingly\n      if (contrastRatio >= 4.5) {\n        return '#000000' // Black\n      } else {\n        return '#FFFFFF' // White\n      }\n    }\n\n    const chapterButtonContainer = d3.select('#chapter_button_container')\n    const swapShowChapter = this.swapShowChapter\n    chapterButtonContainer\n      .selectAll('.ripple_button')\n      .data(Object.keys(chapterXaxis))\n      .join('a')\n      .attr('id', d => `show_${d}_button`)\n      .attr('class', 'ripple_button')\n      .style('background-color', d => colour[d])\n      .style('color', d => getReadableTextColour(colour[d]))\n      .text(d => d)\n      .on('click', function (this: any, event, d) {\n        d3.select(this).style('opacity', d3.select(this).style('opacity') === '1' ? '0.5' : '1')\n        swapShowChapter(d)\n      })\n\n    Streamlit.setFrameHeight()\n  }\n\n  public render = (): ReactNode => {\n    D3_DIV_ID = `bubble_component_${this.props.args.key}`\n\n    return (\n      <span>\n        <div id={D3_DIV_ID} />\n\n        <div className='button_container' id='chapter_button_container' />\n        <div className='button_container'>\n          <a id='show_all_button' className='ripple_button'>Show All Chapters</a>\n          <a id='swap_view_button' className='ripple_button'>To Episode View</a>\n        </div>\n\n      </span>\n    )\n  }\n\n  /**\n   * Swap between chapter and episode view.\n   *\n   * @param {string[]} chapterOrder Tho order in which to place the chapters on the X-axis in the chapter view.\n   * @param {Number} duration Duration of the swap animation.\n   * @returns\n   */\n  private swapView (chapterOrder?, duration = 800): void {\n    const svg = d3.select('#' + D3_DIV_ID).select('svg').select('g')\n\n    // Swap to the which is currently not displayed.\n    if (svg.select('#dataCircle').attr('view') === 'chapter') {\n      d3.select('#swap_view_button').text('To Chapter View')\n      toEpisodeView(duration)\n      return\n    }\n    if (svg.select('#dataCircle').attr('view') === 'episode') {\n      d3.select('#swap_view_button').text('To Episode View')\n      toChapterView(chapterOrder, duration)\n    }\n\n    /**\n     * Swap to the episode view.\n     * Do this by changing creating a new X-scale and recalculating the x-position of every bubble.\n     *\n     * @param {Number} duration Duration of the swap animation.\n     */\n    function toEpisodeView (duration = 800): void {\n      const margin = { top: 80, right: 150, bottom: 80, left: 80 }\n      const width = 1200 - margin.left - margin.right\n      const height = 600 - margin.top - margin.bottom\n\n      const svg = d3.select('#' + D3_DIV_ID).select('svg').select('g')\n\n      // Get the max episode from the data.\n      let maxEpisode = 0\n\n      svg.selectAll('#dataCircle')\n        .each(function (d) {\n          if (d.episode > maxEpisode) {\n            maxEpisode = d.episode\n          }\n        })\n\n      const episodeX = d3.scaleLinear()\n        .domain([0, maxEpisode + 1])\n        .range([0, width])\n\n      const xAxis = d3.select('#myXaxis')\n\n      // Recalculate all x's.\n      xAxis.transition().duration(duration)\n        .call(d3.axisBottom(episodeX)\n          .ticks(maxEpisode)\n          .tickFormat(function (d) { if (d > 0 && d <= maxEpisode) { return `Episode ${d}` } }))\n\n      svg.selectAll('#dataCircle')\n        .attr('view', 'episode')\n        .transition().duration(duration)\n        .attr('cx', d => episodeX(d.episode))\n\n      // Draw the act lines and background colours.\n      svg.selectAll('.actLine')\n        .transition().duration(duration)\n        .attr('d', d => {\n          console.log(d)\n          const path = d3.path()\n          path.moveTo(episodeX(d.stop), 0)\n          path.lineTo(episodeX(d.stop), height)\n          return path\n        })\n\n      svg.selectAll('.actLabel')\n        .transition().duration(duration)\n        .style('opacity', '1')\n        .attr('transform', d => `translate(${episodeX((d.stop + d.start) / 2)}, -5)`)\n\n      svg.selectAll('.actRect')\n        .transition().duration(duration)\n        .style('opacity', '0.2')\n        .attr('width', d => episodeX(d.stop) - episodeX(d.start))\n        .attr('transform', d => `translate(${episodeX(d.start)}, 0)`)\n    }\n\n    /**\n     * Swap to the chapter view.\n     * Do this by changing creating a new X-scale and recalculating the x-position of every bubble.\n     *\n     * @param {Number} duration Duration of the swap animation.\n     */\n    function toChapterView (chapterOrder?, duration = 800): void {\n      const margin = { top: 80, right: 150, bottom: 80, left: 80 }\n      const width = 1200 - margin.left - margin.right\n      const height = 600 - margin.top - margin.bottom\n\n      const svg = d3.select('#' + D3_DIV_ID).select('svg').select('g')\n\n      const chapterXaxis = {}\n\n      chapterOrder?.map((d, i) => {\n        if (!(d in chapterXaxis)) {\n          chapterXaxis[d] = i + 1\n        }\n        return 0\n      })\n\n      const NUM_CHAPTERS = Object.keys(chapterXaxis).length\n\n      const chapterX = d3.scaleLinear()\n        .domain([0, NUM_CHAPTERS + 1])\n        .range([0, width])\n\n      const xAxis = d3.select('#myXaxis')\n\n      const tickStrings = {}\n      Object.keys(chapterXaxis).map((d, i) => {\n        tickStrings[i + 1] = d\n      })\n\n      // Recalculate all x's.\n      xAxis.transition().duration(duration)\n        .call(d3.axisBottom(chapterX)\n          .ticks(NUM_CHAPTERS)\n          .tickFormat(d => tickStrings[d]))\n\n      svg.selectAll('#dataCircle')\n        .attr('view', 'chapter')\n        .transition().duration(duration)\n        .attr('cx', d => chapterX(chapterXaxis[d.chapter]))\n\n      // Remove the act lines and background colours.\n      svg.selectAll('.actLine')\n        .transition().duration(duration)\n        .attr('d', d => {\n          const path = d3.path()\n          path.moveTo(0, 0)\n          path.lineTo(0, height)\n          return path\n        })\n\n      svg.selectAll('.actLabel')\n        .transition().duration(duration)\n        .style('opacity', '0')\n        .attr('transform', 'translate(0, -5)')\n\n      svg.selectAll('.actRect')\n        .transition().duration(duration)\n        .style('opacity', '0')\n        .attr('width', '0')\n        .attr('transform', 'translate(0, 0)')\n    }\n  }\n\n  /**\n   * Show bubbles of all chapters.\n   *\n   * @param duration Duration of the animation.\n   */\n  private showAll (duration = 400): void {\n    const svg = d3.select('#' + D3_DIV_ID).select('svg').select('g')\n    svg.selectAll('#dataCircle')\n      .transition().duration(duration)\n      .style('opacity', '0.7')\n      .style('pointer-events', 'auto')\n\n    d3.select('#chapter_button_container')\n      .selectAll('.ripple_button')\n      .style('opacity', '1')\n  }\n\n  /**\n   * Hide or show all bubbles of the given chapter.\n   *\n   * @param {string} chapter The chapter to show or hide.\n   * @param duration Duration of the animation.\n   */\n  private swapShowChapter (chapter: string, duration = 400): void {\n    const svg = d3.select('#' + D3_DIV_ID).select('svg').select('g')\n\n    svg.selectAll('#dataCircle')\n      .transition().duration(duration)\n      .style('opacity', function (this: any, d) {\n        if (d.chapter === chapter) {\n          if (d3.select(this).style('opacity') === '0.7') {\n            return '0'\n          }\n          return '0.7'\n        }\n        return d3.select(this).style('opacity')\n      })\n      .style('pointer-events', function (this: any, d) {\n        if (d.chapter === chapter) {\n          if (d3.select(this).style('pointer-events') === 'auto') {\n            return 'none'\n          }\n          return 'auto'\n        }\n        return d3.select(this).style('pointer-events')\n      })\n  }\n}\n\nexport default withStreamlitConnection(BubblePlotComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport BubblePlotComponent from \"./BubblePlotComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BubblePlotComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}